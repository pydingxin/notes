Session-File使用内存+内嵌json文件持久化，这也是默认方案。

要理解这个东西，必须清楚以下框架流程。
----------------------------------------------------------------
单例Manager管理所有session对象。类似sessionId→Session的map
----------------------------------------------------------------
首先，sessionId本身不是状态，而是获取状态的钥匙。
Session里存着一个data *gmap.StrAnyMap，可以用Session.Set等方法在data里设置数据，比如：
r.Session.MustSet("key", "val")
用户的登录状态就存在这个data里。
用MustSet对session做写入操作时，发生了两件事。
----------------------------------------------------------------
第一件事，确保建立服务端会话。
r.Session对象可能已经被Manager管理了，也可能还不存在：
根据r.Cookie.Get("gfsessionid")检测
1.如果其值存在Manager里
则r.Session被框架指向已存储的session对象。
2.如果其为空，或不空但已过期(会复用，不必创建新的sessionid)
让r.Session指向一个新初始化的session对象，并把它交给Manager管理。
----------------------------------------------------------------
第二件事，确保建立客户端会话。
对r.Cookie.Get("gfsessionid")为空的客户端
设置：r.Cookie.Set("gfsessionid","...")
返回头就有了 "Set-Cookie: gfsessionid=..."
以后请求就都带着gfsessionid。
----------------------------------------------------------------
客户端的gfsessionid不会清理，还可能复用，因此id并不是状态本身。
为了维护登陆状态，要用Set/Get/Remove/RemoveAll操作Session map里存储的数据。
前端cookie存活事件很长，一般前端会话不会主动结束。
关于退出登陆：
前端调用后端Session.Remove*，清除后端登陆状态。
前端再请求时发现
当前端用过期的sessionid发请求，没有这个id。
，才知道后端会话结束了。
前端有会话 ≠ 会话进行中
----------------------------------------------------------------
session读写的隐含意思
session的写入涉及session前后端会话建立。
session的读取涉及后端续活。
一个Session执行其Data、Get等读取方法时，会自动续活：
记录其sessionId，每隔1分钟重置所有被读取的sessionId的存活时间(TTL)。
----------------------------------------------------------------
后端超时时间可以设置
比如s.SetSessionMaxAge(time.Hour)，每次续活都会把存活时间重置为一小时。
----------------------------------------------------------------

理解上述操作，再来看文档中的例子：

通过登录验证，用写操作初始化前后端会话：
r.Session.MustSet("alive", true)

每次访问都在前置中间件里获取会话状态，活的则续活：
r.Session.Get("alive",false)
如果长时间没访问，后端超期，就关闭会话。

删除该SessionId的信息，即后端主动关闭会话：
r.Session.RemoveAll() 

前端删除cookie，也可以主动关闭会话。

----------------------------------------------------------------
下面模拟一个正常的登录鉴权流程：

func printDataIn(place string, r *ghttp.Request) {
	//在不同位置打印Data
	data, err := r.Session.Data()
	if err != nil {
		fmt.Println("in ", place, " error ", err.Error())
	} else {
		fmt.Println("in ", place, " r.Session.Data= ", data)
	}
}

func middlewareSessionAlive(r *ghttp.Request) {
	printDataIn("middleware", r)
	//对活跃会话，Get使其续活
	if alive,err:= r.Session.Get("alive",false); err!=nil{
		r.Response.WriteExit("middlewareSessionAlive error: ",err.Error())
	}else if alive.Bool(){
		r.Middleware.Next()
	}else{
		r.Response.WriteExit("请先登录")
	}

}

func main() {
	s := g.Server()
	s.SetSessionMaxAge(time.Minute)

	s.Group("/", func(group *ghttp.RouterGroup) {
		group.ALL("/login", func(r *ghttp.Request) {
			//验证账号密码
			if r.Get("name").String() != "dingxin" {
				r.Response.WriteExit("/login 登陆失败")
			}
			r.Session.Set("alive", true) //初始化前后端会话
			r.Session.Set("name", "dingxin")

			printDataIn("login after Set", r)

			r.Response.Write(`
			<html>
				<body>
				<div id="msg">
					/login 登陆成功 <br/>
				</div>
					<script>
						setTimeout(()=>{document.querySelector("#msg").innerText+=document.cookie},2000)
					</script>
				</body>
			</html>
			`)
		})
		group.Group("/", func(group *ghttp.RouterGroup) {
			group.Middleware(middlewareSessionAlive)
			//需要已登录才能走到这里
			group.ALL("/test", func(r *ghttp.Request) {
				r.Response.Write("/test")

				printDataIn("test", r)
			})

			group.ALL("/remove", func(r *ghttp.Request) {
				r.Response.Write("/remove")
				r.Session.Remove("name")
				printDataIn("/remove after remove(name)", r)
			})

			group.ALL("/logout", func(r *ghttp.Request) {
				r.Session.RemoveAll() //关闭后端会话

				printDataIn("logout After RemoveAll", r)

				r.Response.Write(`
				<html>
					<body>
					<div id="msg">
						/logout 您已下线 <br/>
					</div>
						<script>
							setTimeout(()=>{document.querySelector("#msg").innerText+=document.cookie},2000)
						</script>
					</body>
				</html>
				`)
			})
		})
	})
	s.SetPort(80)
	s.Run()
}

