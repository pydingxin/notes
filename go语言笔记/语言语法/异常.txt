异常是意料之外的错误，涉及defer、panic、recover，常见形式为：
    func f(){
        defer func(){
            if e:=recover();e!=nil{
                //处理异常
            }
        }()

        panic("fall in panic")
    }

//---------------------------------------------------

defer是注册延迟函数，不管该函数怎样结束，其内注册函数都会执行（注册是压栈，多次注册会逆序执行）

defer首先用于资源释放，打开资源随手写defer。
    open_source()
    defer func(){ close_source() }()

defer其次用于处理异常。

//---------------------------------------------------

panic("")就是抛出异常[一个字符串]，调用链上的所有函数，在断点处停止，执行各自defer，退出函数。这样不断抛出。

//---------------------------------------------------

若当前处于panic中，只有defer的函数会被执行，此时在defer里执行recover()，就能返回panic的那个字符串的管理单元的指针。若不处于panic，recover()返回nil

//---------------------------------------------------

在抛出过程中，如果有一个函数ff在defer里使用了recover(),这个panic就相当于被catch住了，就停止抛出。ff()也可以正常返回，但需要在recover中修改命名返回值。

如果始终没有人在defer里recover,该协程结束，如果主协程没有recover，主协程也会结束，最终导致所有协程结束。

//---------------------------------------------------

函数返回值的原理，就是把返回值按顺序入栈，放到指定位置。比如 
    func f()int{ x:=0; return x}

它返回的其实不是x这块内存，为了更清晰不妨写成
    func f()(ret int){ x:=0; return x}

把x的值复制到栈顶，这个位置的名字就叫ret，ret是x的拷贝，是两块不同的内存。

所以 return可以分解成两条语句，return x ≈ push x; ret
而defer注册的所有函数，就在这两条语句之间执行。
因此defer可以修改返回值ret，这很重要。

//---------------------------------------------------