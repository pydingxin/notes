结构体应视为js中的对象

定义结构体类型时，用换行分隔
type man struct{
	name string
	age int
}
定义type man 是个 struct，很接近自然语言了

//--------------------------------------------------------

定义结构体变量时，用类似json的语法
	dx:= struct{name:"dingxin", age:33}

也可以按定义类型时的顺序，简写为
	dx:=student{"dingxin",33}
可见，在golang中做一件事，往往只有一种方式，但会有很多语法糖，把这种方式精简到最方便。

//--------------------------------------------------------
结构体作函数参数时，默认是按值传递，即复制一个新的结构体，作为函数的局部变量，两个结构体互相独立
	func change(x man){
		x.age=100 //不改变原值
	}
要按引用传递，必须使用指针
	func change(x *man){
		x.age=100 //用指针访问结构体内部变量，能自动解引用，相比c/c++，真是太丝滑了
	}
//--------------------------------------------------------

变量名首字母大写
在golang中，变量或函数的首字母大写，表示包外可引用，也就是public，小写是private，比如
	type Man struct{
		Name string
		Age int
		id string
	}
表示Man类型外部可用，相当于
	public class Man {
		public:
			string Name,
			int age,
		private:
			string id,
	}
真是精简
//--------------------------------------------------------

struct tag是空格分隔的字符串 `json:"name" foo:"bar"`，用于反射
//--------------------------------------------------------


//--------------------------------------------------------

