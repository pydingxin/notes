var arr [3]int = [3]int{1,2,3};

直观理解，变量arr里有3个int，是个数组

这里数组的类型是 [3]int，必须带着数字。这与指针类似*int，可以理解为通过组合，整体形成一个新符号 [3]int

定义时数组时，长度就必须定下来，所以必须指明数字，不能用变量表示长度，golang的数组缺乏动态能力。

//--------------------------------------------------------

[3]int{1,2,3} 是一个匿名数组，用的是花括号，而不是方括号，这似乎有些奇怪，但如果对比struct：
	x:=[3]int{1,2,3}
	x:=student{"name",33}
可以看出，这体现了统一的思路，就是在定义变量时，把字面数据都放到花括号里，形成 
	x:=type{data,...}
的形式，这种形式上极简而统一的追求，是golang的特色。

//--------------------------------------------------------
golang变量都是默认初始化的，数组默认也是，其中数字是0，字符串是""
var arr [3]string //就是["","",""]
var arr [3]int //就是[0,0,0]

//--------------------------------------------------------

沿着golang的特色，添加语法糖：
	var arr [3]int = [3]int{1,2,3}
	arr:= [3]int{1,2,3}			//用冒号自动推断类型
	arr:= [...]int{1,2,3,4} 	//省略号自动推断长度
	arr:= []int{1,2,3,4} 		//自动推断长度

	arr:=[5]int{0:3, 2:9} //指明长度时，为特定下标赋值

形式上与struct完全一致了：
	dx:=student{name:"dingxin",age:33}
可见，花括号是一种深思熟虑的设计

//--------------------------------------------------------
多维数组：

所谓m*n维的数组，就是数组有m个元素，每个子元素里又各有n个元素，依次类推
比如var values [3][4][5][6]int

//--------------------------------------------------------

注意定义方式：
1、var arr [2][3]int 
自动初始化为[[0,0,0],[0,0,0]]

2、arr:= [][]int{}
实例化了一个空数组，赋给了arr

//--------------------------------------------------------

实例化：
[][]int{} 								→ [] //实例化为空，因为{}里什么都没有
[][]int{[]int{}, []int{}} 				→ [[] []]
[][]int{[]int{}, []int{}, []int{}} 		→ [[] [] []]
[][]int{[]int{1, 2, 3}, []int{4, 5, 6}} → [[1 2 3] [4 5 6]]

精简：
[3][4]int{{0, 1, 2, 3},{4, 5, 6, 7},{8, 9, 10, 11}}

精简：
[][]int{{0, 1, 2, 3},{4, 5, 6, 7},{8, 9, 10, 11}}

这就是最精简的形态了，实例化还可以，不算特别繁琐

//--------------------------------------------------------

复杂点的golang的变量，类似c++的STL容器，而不像c语言那样直接指向数据
比如字符串，只是一个结构体，放着地址和长度
二维数组也是一个管理单位，指向的是一维数组的管理单位，所以改变指向的子元素，所谓的维度也就改变了

