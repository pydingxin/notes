# 创建协程
用go执行函数就是创建协程
go func(){..}()
go funcX()

# 创建通道
ch:= make(chan int, cap)
若不指定cap，默认为0，即同步通道

# 通道IO
ch<- x   //这条语句是个整体，不能拆开
x:= <-ch //赋值语句。<-ch是可求值的阻塞型表达式，可单独使用

# 通道作函数参数
func(ch chan int)   //可读可写
func(ch chan<- int) //此函数内只写，用ch替代chan即为用法 ch<-
func(ch <-chan int) //此函数内只读，<-ch

# 有限等待单个通道
for x:=range(ch){   
    //close(ch)后for range自动结束
}

# 一次性等待多个通道
select{
    case x:=<-ch1:        ..
    case y:=<-ch2:        ..
}

# 永久性等待多个通道
for{
    select{
        case x:=<-ch1:    ..
        case y:=<-ch2:    ..
    }
}
注意close(ch)后，<-ch不阻塞，立即返回该类型零值，如""、0

# 并发安全
因为不同协程的汇编指令错步执行，多个协程访问父函数中的变量会出问题。
对这个问题，sync包中有锁、读写锁、并发Map、原子变量等工具。
资源只有一份，上述工具本质是让子协程竞争访问父变量，也就是共享内存。
但go反对共享内存，推荐把资源操作放到一个协程里，其他协程给它通信。
这就是go推荐的，用通信实现并发安全。